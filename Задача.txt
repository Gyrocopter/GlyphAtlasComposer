- Входные данные:
1. Список символов юникода
2. Требуемый на выходе размер битмапных символов


- Выходные данные:
1. RGBA битмап, содержащий изображения необходимых символов юникода
2. Ассоциативный массив Код символа (UTF8?) -> rect, обозначающий координаты символа в битмапе

- Дополнительно (но важно)
1. Возможность добавить еще символов к уже учтенным (отсюда два следующих варианта)
1.1 Либо пересоздаем атлас символов с новыми символами
1.2 Либо, используя более простой алгоритм упаковки символов, просто лепим изображение символа в существующий атлас по порядку.
Здесь пара вопросов: В простом варианте упаковки - все символы умещаются в одинаковые прямоугольники. Размер такого прямоугольника
считается из размера максимального символа. Что делать если добавленный позднее символ оказался больше всех остальных?

class FontRasterizer
{
	void AddGlyph(unsigned int charCode);
	void AddGlyphRange(unsigned int charCodeFirst, unsigned int charCodeLast);
	void Rasterize();
	
	void* GetBitmapData(unsigned int &w, unsigned int &h);
	Rect* GetCharRect(unsigned int charCode);
};